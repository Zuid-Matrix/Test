@namespace Matrix.Prox3.IntelliZone.Blazor.Components
@inject HttpClient http

<body class="w-100 m-0">
				

	@if (Mine != null)
	{
		
			<div class="mb-1 d-flex justify-content-between">
			<div class="fw-bolder col-4">Mine Name:</div>
				@if (BlazoredModal.Title.Contains("Edit"))
				{
				<div class="col-8"><p class="form-control">@Mine.MineName </p> </div>
				}
				else
				{
				<div class="col-8"><InputText class="form-control" type="text" @bind-Value="Mine.MineName" /></div>
				}
			</div>
			<div class="mb-1 d-flex justify-content-between">
				<div class="col-8">
			<div class="fw-bolder col-6">Time Zone:</div>
			<InputSelect class="form-select" @bind-Value="Mine.timeZoneSerString">
				<option selected value="@Mine.timeZoneSerString">@(Mine.timeZoneSerString == null ? String.Empty : TimeZoneInfo.FromSerializedString(Mine.timeZoneSerString).DisplayName.ToString())</option>

		 		@foreach (var option in _timeZones)
				{
				<option value="@option.ToSerializedString()">@option.DisplayName.ToString()</option>
				} 
				
			</InputSelect>
			</div>
			</div>
			<div class="d-flex flex-row p-3 justify-content-center">
			
				<Button Type="ButtonType.Submit" Active=false class="btn-outline-success" @onclick="Add">
					@if (BlazoredModal.Title.Contains("Edit"))
					{
						<div>Update Mine</div>
					}
					else
					{
						<div>Add Mine</div>
					}
				</Button>
				<Button Class="btn-outline-danger" @onclick="Delete">Delete</Button>
			</div>

	}	
					
</body>

	



@code {

	[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
	[CascadingParameter] IModalService ModalService { get; set; } = default!;

	[Parameter]
	public Mine? Mine { get; set; }


	private List<TimeZoneInfo> _timeZones = new();

	protected override async Task OnInitializedAsync()
	{

		_timeZones = TimeZoneInfo.GetSystemTimeZones().ToList();
		if (Mine == null)
		{
			Mine = new();
		}
	}

	private async Task Close() => await BlazoredModal.CloseAsync();

	private async Task Add()
	{


		if (Mine!.MineName == null || Mine!.MineName.Length <=2)
		{
			ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), $" Please enter a valid Mine name longer than 2 characters");
			ModalService.Show<PopupMessage>("Could not create Mine", message);
		}
		else
		{

			try
			{

				var t = await http.PostAsJsonAsync<Mine>("api/Mine", Mine);
				if (t.IsSuccessStatusCode)
				{
					await Close();
				}
				else
				{
					ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), $"Status Code: {t.StatusCode} - {t.Content}");
					ModalService.Show<PopupMessage>("Could not create Mine", message);
				}
			}
			catch (Exception e)
			{

			}
		}

		await InvokeAsync(StateHasChanged);

	}


	private async void Delete()
	{
		try
		{

			var t = await http.DeleteAsync($"api/Mine/{Mine.MineName}");
			if (t.IsSuccessStatusCode)
			{
				await Close();
			}
			else
			{
				ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), $"Status Code: {t.StatusCode} - Please delete all Sections allocated to this mine first");
				ModalService.Show<PopupMessage>("Could not create Mine", message);
			}


		}
		catch (Exception e)
		{
			ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), "Please delete all Sections allocated to this mine first");
			ModalService.Show<PopupMessage>("Could not create Mine", message);
		}


		await InvokeAsync( StateHasChanged);
	}

}