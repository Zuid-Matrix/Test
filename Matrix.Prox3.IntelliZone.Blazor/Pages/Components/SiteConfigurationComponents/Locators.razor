@namespace Matrix.Prox3.IntelliZone.Blazor.Components
@using System.Threading.Tasks
@using System.Net.Sockets
@using Microsoft.EntityFrameworkCore
@inject HttpClient http

<div class="component-headings">Locators</div>
<hr class="mt-0"/>
<div class="d-flex justify-content-between align-items-center">
	<div class="ms-2">
		Items per page:
		<select @bind="@pagination.ItemsPerPage">
			<option selected>10</option>
			<option>20</option>
			<option>50</option>
			<option>100</option>
			<option>200</option>
		</select>
	</div>

		
</div>
<div class="m-2">
	@if (temp != null)
	{
		<QuickGrid Class="table" Items="temp" Pagination="@pagination">
			<PropertyColumn Property="@(p => p.MNID)" Sortable="true">
				<ColumnOptions>
					<div class="search-box">
						<input type="search" autofocus @bind="mnidFIlter" @bind:event="oninput" placeholder="MNID..." />
					</div>
				</ColumnOptions>
			</PropertyColumn>
			<PropertyColumn Property="@(p => p.LocatorType)" Title="Type" Sortable="true" />
			<PropertyColumn Property="@(p => p.LocatorFunction)" Title="Function" Sortable="true" />
			<PropertyColumn Property="@(p => p.LastSeenDate)" Title="Last Seen" Sortable="true" />
			<PropertyColumn Property="@(p => p.serialNumber)" Title="Serial Num" Sortable="true" />
			@* 			<TemplateColumn Title="Current Employee">
				@using (ProxLocalConnectionContext _allocationContext = _ProxLocalConnectionContextFactory.CreateDbContext())
				{
 					var empList = _allocationContext.Employees.ToList();
					var points = _allocationContext.ChargingPoints.ToList();
					var locators = _allocationContext.Locators.ToList();
					var alloclist = _allocationContext.Allocations.Where(s => s.endDate == null).ToList(); 
					var tempaallocation = _allocationContext.Allocations.Include(s => s.Locator).Include(s => s.Employee).Where(s => s.Locator.decMNID == context.decMNID && s.endDate == null).FirstOrDefault();
					@if(tempaallocation != null && tempaallocation.Employee != null)
					{
						<p>@tempaallocation.Employee.Surname @(tempaallocation.Employee.Initials == null ? "" : tempaallocation.Employee.Initials), @(tempaallocation.Employee.Names == null ? "" : tempaallocation.Employee.Names) </p>
					}
				}
			</TemplateColumn>
			<TemplateColumn Title="Charging Point">
					@if (tempaallocation != null && tempaallocation.ChargingPoint != null)
					{
						<p>@tempaallocation.ChargingPoint.PointName</p>
					}

			</TemplateColumn> *@
			<TemplateColumn>
				<button Class="btn btn-light" @onclick="()=>Update(context)">Edit</button>
			</TemplateColumn>

		</QuickGrid>
	}

			


				<Paginator State="@pagination" /> 
		</div>


@code {

	[CascadingParameter] public IModalService Modal { get; set; } = default!;

	private Locator? Locator = new();
	ModalParameters controllerparams = new();
	PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
	string mnidFIlter;

	IQueryable<Locator> temp
	{
		
		get
		{
			var t = Task.Run(async () => await http.GetFromJsonAsync<List<Locator>>("api/Locators"));
			t.Wait();
			if (!string.IsNullOrEmpty(mnidFIlter))
			{
				var filteredtemp = t.Result.Where(c => c.MNID != null && c.MNID.Contains(mnidFIlter));
				if (filteredtemp != null)
				{
					return filteredtemp.AsQueryable();
				}
			}



			return t.Result.AsQueryable();
		}
	}
	
	private async Task Update(Locator item)
	{
		ModalParameters parameters = new ModalParameters().Add(nameof(LocatorModal.tempLocator), item);

		await Modal.Show<LocatorModal>("Edit Locator", parameters).Result;
		await InvokeAsync(StateHasChanged);
	}



	// private async void Delete(Locator IPToDelete)
	// {
	// 	//var response =  await Http.PostAsJsonAsync<MatrixDevice>($"{VolatileStorage.apiprimaryroute}/api/MatrixDevices",  ControllerToEdit);
	// 	using (var _proxLocalConnectionContext = await _ProxLocalConnectionContextFactory.CreateDbContextAsync())
	// 	{
	// 		_proxLocalConnectionContext.Locator.RemoveRange(IPToDelete);
	// 		await _proxLocalConnectionContext.SaveChangesAsync();
	// 		await InvokeAsync(() => StateHasChanged());
	// 	}
		
	// }
	
}

