@namespace Matrix.Prox3.IntelliZone.Blazor.Components
@using System.IO.Compression
@using Matrix.Prox3.IntelliZone.Data.Reporting
@using System.Threading.Tasks
@using System.Globalization
@using Matrix.Prox3.IntelliZone.Data.Models
@using Matrix.Prox3.IntelliZone.Data.Models.Reporting
@using ClosedXML
@using ClosedXML.Excel
@using MudBlazor
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using System.Diagnostics
@using Matrix.Prox3.IntelliZone.Data.VolatileStorage
@using Matrix.Prox3.IntelliZone.Data.Models.MatrixChart
@using Microsoft.AspNetCore.Components.QuickGrid
@using Matrix.Prox3.IntelliZone.Blazor.Components
@inject IJSRuntime js


<div class="report-page">
	<AuthorizeView>
		<Authorized>
			@if (busy == false && MaintenanceModeEvents != null)
			{
				<div class="info-display-block rounded-xl">	
					@if (SelectedSections.Count() != 1)
					{
						@if (ChartTypeBar == false)
						{
							<div class="d-flex d-md-block">
								<div class=" graph-category-block">
									@* Number of diagnostic Events *@
									<MatrixLine SumValues="false" TopN="@TopN" Interval="@Interval" Title="Number of Maintenance Mode Events" Label="Count" events="MaintenanceModeEvents.Where(s => s.eventDuration != null).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.Section.SectionName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration, Date = s.Converted_Time.Date }).ToList()" />

								</div>
								<div class=" graph-category-block">
									@* Duration of diagnostic Events *@
									<MatrixLine SumValues="true" TopN="@TopN" Interval="@Interval" Title="Duration of Maintenace Mode Events" Label="Minute" events="MaintenanceModeEvents.Where(s => s.eventDuration != null ).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.Section.SectionName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration/1000000/60, Date = s.Converted_Time.Date}).ToList()" />

								</div>
							</div>

						}
						else
						{

							<div class="d-flex d-md-block ">
								<div class="  graph-category-block">
									@* Number of diagnostic Events *@
									<Bar SumValues="false" TopN="@TopN" Interval="@Interval" Title="Number of Maintenance Mode Events" Label="Count" events="MaintenanceModeEvents.Where(s => s.eventDuration != null ).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.Section.SectionName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration, Date = s.Converted_Time.Date }).ToList()" />

								</div>
								<div class=" graph-category-block">
									@* Duration of diagnostic Events *@
									<Bar SumValues="true" TopN="@TopN" Interval="@Interval" Title="Duration of Maintenace Mode Events" Label="Minute" events="MaintenanceModeEvents.Where(s => s.eventDuration != null).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.Section.SectionName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration/1000000/60, Date = s.Converted_Time.Date}).ToList()" />

								</div>
							</div>
						}
				
					}
					else
					{
			
						@if (ChartTypeBar == false)
						{
							<div class="d-flex d-md-block ">
								<div class="  graph-category-block">
									@* Number of diagnostic Events *@
									<MatrixLine SumValues="false" TopN="@TopN" Interval="@Interval" Title="Number of Maintenance Mode Events" Label="Count" events="MaintenanceModeEvents.Where(s => s.eventDuration != null ).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.MachName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration, Date = s.Converted_Time.Date }).ToList()" />

								</div>
								<div class=" graph-category-block">
									@* Duration of diagnostic Events *@
									<MatrixLine SumValues="true" TopN="@TopN" Interval="@Interval" Title="Duration of Maintenace Mode Events" Label="Minute" events="MaintenanceModeEvents.Where(s => s.eventDuration != null ).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.MachName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration/1000000/60, Date = s.Converted_Time.Date}).ToList()" />

								</div>
							</div>

						}
						else
						{

							<div class="d-flex d-md-block">
								<div class="  graph-category-block">
									@* Number of diagnostic Events *@
									<Bar TopN="@TopN" SumValues="false" Interval="@Interval" Title="Number of Maintenance Mode Events" Label="Count" events="MaintenanceModeEvents.Where(s => s.eventDuration != null ).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.MachName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration, Date = s.Converted_Time.Date }).ToList()" />

								</div>
								<div class=" graph-category-block">
									@* Duration of diagnostic Events *@
									<Bar TopN="@TopN" SumValues="true" Interval="@Interval" Title="Duration of Maintenace Mode Events" Label="Minute" events="MaintenanceModeEvents.Where(s => s.eventDuration != null ).Select(s => new MatrixGeneralChartData{ Category = s.Package.Machine.MachName, SubCategory = s.DiagnosticSubModule, value = (decimal)s.eventDuration/1000000/60, Date = s.Converted_Time.Date}).ToList()" />

								</div>
							</div>
						}
						@if (Summaries_ZoneBreach != null && Summaries_ZoneBreach.Any() && MaintenanceModeEvents != null && MaintenanceModeEvents.Any())
						{
							<div class="d-flex d-md-block">
								<div class=" graph-category-block">
									<MaintModeThereMNID MaintenanceModeEvents="@MaintenanceModeEvents" Summaries_ZoneBreach="@Summaries_ZoneBreach" Interval="@Interval" SectionIDs="SelectedSections" DateFrom="(DateTime)DateRange.Start" DateTo="(DateTime)DateRange.End" />
								</div>

							</div>
						}

					}		
				</div>
			}
			else
			{
				<NoData/>
			}
		</Authorized>
		<NotAuthorized>
			Please login to view this page
		</NotAuthorized>
	</AuthorizeView>
</div>





@code {
	//[CascadingParameter] public IModalService Modal { get; set; } = default!;
	private bool busy = false;


	private List<(DateTime?, PackageInfo?)>? tempMaintAn = new();

	[Parameter]
	public List<ZoneBreachSummary>? Summaries_ZoneBreach { get; set; }

	[Parameter]
	public List<EventlogReport>? MaintenanceModeEvents { get; set; }

	[Parameter]
	public DateRange DateRange { get; set; }

	[Parameter]
	public int Interval { get; set; }

	[Parameter]
	public int Duration { get; set; }

	[Parameter]
	public bool ChartTypeBar { get; set; }

	[Parameter]
	public int? TopN { get; set; }

	[Parameter]
	public int[] SelectedSections { get; set; }


	PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
	Dictionary<string, System.Reflection.PropertyInfo> properties = new Dictionary<string, System.Reflection.PropertyInfo>();
	Dictionary<string, System.Reflection.PropertyInfo> tableproperties = new Dictionary<string, System.Reflection.PropertyInfo>();
	










}
