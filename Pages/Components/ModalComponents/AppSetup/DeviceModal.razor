@namespace Matrix.Prox3.IntelliZone.Blazor.Components
@inject HttpClient http
@using Matrix.Prox3.IntelliZone.Data.Enums


<div class="w-100 m-0">
				

	@if (device != null )
	{

			<div class="mb-1 d-flex justify-content-between">
			<div class="fw-bolder col-6">IP:</div>	
			@if (BlazoredModal.Title.Contains("Edit"))
			{
					<div class="col-6">	<InputText Disabled class="form-control" type="text" @bind-Value="device.IP" /></div>
			}
			else
			{
				<div class="col-6">	<InputText class="form-control" type="text" @bind-Value="device.IP" /></div>
			}
			
			</div>
			<div class="mb-1 d-flex justify-content-between">
			<div class="fw-bolder col-4">Machine Name:</div><div class="col-6"> <InputText class="form-control" @bind-Value="device.MachineName" /> </div>
			</div>
			<div class="d-flex mb-1 justify-content-between">
				<div class="fw-bolder col-6">Section:</div>
				<InputSelect class="form-select" required @bind-Value="section.SectionId">
					
					<option selected value="@(section.SectionId)">@(section.SectionName)</option>
				@if (sections != null)
				{
						foreach (var option in sections)
						{
							<option value="@option.SectionId"> @option.SectionName @option.Mine.MineName</option>
						}
				}
	
					 
				</InputSelect>
				<Button Type="ButtonType.Submit" Active=false class="btn-outline-success" @onclick="@AddSection">New..</Button>
			</div>
			<div class="d-flex mb-1 justify-content-between">
				<div class="fw-bolder col-6">Device Type:</div>
				<InputSelect class="form-select" @bind-Value="device.DeviceType">
					<option selected value="@device!.DeviceType">@device!.DeviceType</option>
		
			
					<option value="@DeviceType.LocatorTestStation"> @DeviceType.LocatorTestStation</option>
					<option value="@DeviceType.Server"> @DeviceType.Server</option>
					<option value="@DeviceType.PDSController"> @DeviceType.PDSController</option>

						
					
				</InputSelect>
				<Button Type="ButtonType.Submit" Active=false class="btn-outline-success" @onclick="@AddSection">New..</Button>
			</div>
			<div class="mb-1 d-flex justify-content-between">
			<div class="fw-bolder col-6">Shift Length(seconds):</div> <div class="col-6">	<InputNumber class="form-control" @bind-Value="device.shiftSeconds" /></div>
		</div>
			<div class="mb-1 d-flex justify-content-between">
			<div class="fw-bolder col-6">Max Locators Allowed:</div><div class="col-6">	<InputNumber class="form-control" @bind-Value="device.maxPeople" /></div>
	</div>
			<div class="mb-1 d-flex justify-content-between">
		<div class="fw-bolder col-6">Allow Writing Configurations:</div> <InputCheckbox class="form-check" @bind-Value="device!.allowWrite" />
	</div
		
			<div class="d-flex flex-row p-3 justify-content-center">
			
				<Button Type="ButtonType.Submit" Active=false class="btn-outline-success" @onclick="Add">
					@if (BlazoredModal.Title.Contains("Edit"))
					{
						<div>Update Device</div>
					}
					else
					{
						<div>Add Cotroller</div>
					}
				</Button>
				<Button Class="btn-outline-danger" @onclick="Delete">Delete</Button>
			</div>
		
	}	
					
</div>

	



@code {

	[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
	[CascadingParameter] IModalService ModalService { get; set; } = default!;

	[Parameter]
	public MatrixDevice? device { get; set; }

	private Section? section = new();
	//private DeviceLocation location = new();


	IQueryable<Section> sections
	{
		get
		{
			try
			{
				var t = Task.Run(async () => await http.GetFromJsonAsync<List<Section>>("api/Sections"));
				t.Wait();
				return t.Result.AsQueryable();
			}
			catch
			{
				return null;
			}

		}
	}


	protected override async Task OnInitializedAsync()
	{

		if (device == null)
		{
			device = new();

		}
		else
		{



		}


	}



	private async Task AddMine()
	{
		await ModalService.Show<MineModal>("New Mine").Result;
		await InvokeAsync(StateHasChanged);
	}

	private async Task AddSection()
	{
		await ModalService.Show<SectionModal>("New Section").Result;
		await InvokeAsync(StateHasChanged);
	}



	private async Task Close() => await BlazoredModal.CloseAsync();

	private async Task Add()
	{

		if (section.SectionId == null)
		{
			ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), "Section cannot be NULL");
			ModalService.Show<PopupMessage>("Error", message);
		}

		else
		{
			device.Section = sections.FirstOrDefault(section => section.SectionId == section.SectionId);

			try
			{

				var t = await http.PostAsJsonAsync<MatrixDevice>("api/MatrixDevices", device);
				if (t.IsSuccessStatusCode)
				{
					await Close();
				}
				else
				{
					ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), $"Status Code: {t.StatusCode} - {t.Content}");
					ModalService.Show<PopupMessage>("Could not create Device", message);
				}
					
				await Close();
			}
			catch (Exception e)
			{
				Console.WriteLine(e);
			}

				
		}


	}

	private async void Delete()
	{
		try
		{

			var t = await http.DeleteAsync($"api/MatrixDevices/{device.IP}");
			if (t.IsSuccessStatusCode)
			{
				await Close();
			}
			else
			{
				ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), $"Status Code: {t.StatusCode} - Please delete all Foreign Keys allocated to this Section first");
				ModalService.Show<PopupMessage>("Could not Delete Controller", message);
			}


		}
		catch (Exception e)
		{
			ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), "Please delete all Data allocated to this mine first");
			ModalService.Show<PopupMessage>("Could not Delete Controller", message);
		}


		await InvokeAsync(StateHasChanged);
	}
}