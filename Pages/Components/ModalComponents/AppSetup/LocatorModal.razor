@namespace Matrix.Prox3.IntelliZone.Blazor.Components
@using proxtalk
@inject HttpClient http
<body class="w-100 m-0">
				

	@if (tempLocator != null)
	{

			<div class="mb-1 d-flex justify-content-between">
				<div class="fw-bolder col-6">MNID:</div>		<div>@tempLocator.MNID</div>
			</div>

				<div class="mb-1 d-flex justify-content-between">
					<div class="fw-bolder col-6">Serial Number:</div>			<input type="number" class="form-label col-6" @bind="@tempLocator.serialNumber" />
				</div>
			
 


			<InputSelect class="form-select" @bind-Value="tempLocator!.LocatorType">
				<option selected value="@tempLocator!.LocatorType">@tempLocator!.LocatorType</option>

				@foreach (var option in Enum.GetNames<LocatorType>())
					{
						<option value="@option"> @option</option>
					}
			
			</InputSelect>


			<InputSelect class="form-select" @bind-Value="tempLocator!.LocatorFunction">
				<option selected value="@tempLocator!.LocatorType">@tempLocator!.LocatorFunction</option>

				@foreach (var option in Enum.GetNames<LocatorFunction>())
				{
					<option value="@option"> @option</option>
				}

			</InputSelect>

			<div class="d-flex flex-row p-3 justify-content-center">
			
				<Button Type="ButtonType.Submit" Active=false class="btn-outline-success" @onclick="Update">

						<div>Update Locator</div>
					
				</Button>
					 <Button class="btn-outline-D" @onclick="Close">Close</Button> 
			</div>
		
	}	
					
</body>

	



@code {

	[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
	[CascadingParameter] IModalService ModalService { get; set; } = default!;

	[Parameter]
	public Matrix.Prox3.IntelliZone.Data.Models.Locator tempLocator { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (tempLocator.serialNumber == null)
		{
			tempLocator.serialNumber = 0;
		}
		if (tempLocator.LocatorType == null)
		{
			tempLocator.LocatorType = LocatorType.LOCATOR_TYPE_UNKNOWN;
		}
	}


	private async Task Close() => await BlazoredModal.CloseAsync();

	private async Task Update()
	{
		try
		{

			var t = await http.PostAsJsonAsync<Locator>("api/Locators", tempLocator);
			if (t.IsSuccessStatusCode)
			{
				await Close();
			}
			else
			{
				ModalParameters message = new ModalParameters().Add(nameof(PopupMessage.BodyText), $"Status Code: {t.StatusCode} - {t.Content}");
				ModalService.Show<PopupMessage>("Could not create Device", message);
			}

			await Close();
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}

	}

}