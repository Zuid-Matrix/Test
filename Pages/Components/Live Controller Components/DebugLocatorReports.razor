@namespace Matrix.Prox3.IntelliZone.Blazor.Components



@if (LocatorLogs != null)
{
	<div>
		<div class="m-4">
			<div class="page-size-chooser">
				Items per page:
				<select @bind="@pagination.ItemsPerPage">
					<option>10</option>
					<option>20</option>
					<option>50</option>
					<option>100</option>
					<option>200</option>
				</select>
			</div>


		<QuickGrid class="table-bordered transparent-table" Items="@temp" Pagination="@pagination">
		

				<PropertyColumn Property="@(p => p.Message)" Title="Message" Sortable="true" />
				<PropertyColumn Property="@(p => p.dateTime)" Title="Date" Sortable="true" />
				<PropertyColumn Property="@(p => p.MNID)" Sortable="true" >
										            <ColumnOptions>
							<div class="search-box">
								<input type="search" autofocus @bind="mnidFIlter" @bind:event="oninput" placeholder="MNID..." />
							</div>
					</ColumnOptions>
					</PropertyColumn>
				<PropertyColumn Property="@(p => p.TestState == 0 ? "PASS" : "Not Tested")" Title="Test Status" Sortable="true" />
				<PropertyColumn Property="@(p => p.batteryVoltage != null? p.batteryVoltage : 0)" Title="Battery %" Sortable="true" />
				<TemplateColumn Title="Employee" >
	 				<ColumnOptions>
						<div class="search-box">
							<input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Surname..." />
						</div>
					</ColumnOptions>
					<ChildContent>
						@if (context.Allocation != null  )
						{
							if (context.Allocation.Employee != null)
							{
								<p>@context.Allocation.Employee.Surname </p>
							}
							
						}
					
					</ChildContent> 
					

					</TemplateColumn>

				@* <PropertyColumn Property="@(p => p.Allocation.Id)" Sortable="true" /> *@
	@* 		<PropertyColumn Property="@(p => p.Allocation.Employee.EmployeeCode)" Sortable="true" />
			<PropertyColumn Property="@(p => p.Allocation.Employee.Names)" Sortable="true" />
			<PropertyColumn Property="@(p => p.Allocation.Employee.Initials)" Sortable="true" />
			<PropertyColumn Property="@(p => p.Allocation.Employee.Surname)" Sortable="true" /> *@

			@* <PropertyColumn Property="@(p => p.locatorProximityState)" Title="Status" Sortable="true" /> *@





			</QuickGrid>
		</div>
		<Paginator State="@pagination" />

	</div>

}

@code {

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


	private float ft = (float)3.28084;
	private float? syncratems = (float)0.0;
	string mnidFIlter;
	string nameFilter;

	[Parameter]
	public List<ActiveLocator> activeLocators { get; set; }

	[Parameter]
	public List<LocatorLog> LocatorLogs { get; set; }

	IQueryable<LocatorLog> temp
	{
		get
		{
			//var result = new List<LocatorLog>();
			//var result = _ctxFactory.CreateDbContext().LocatorReports.Include(s => s.locator).Include(s => s.Allocation).OrderByDescending(s => s.dateTime).AsNoTracking().ToList();

			if (!string.IsNullOrEmpty(mnidFIlter))
			{
				var temp = LocatorLogs.Where(c => c.MNID != null && c.MNID.Contains(mnidFIlter));
				return temp.AsQueryable();
			}

			if (!string.IsNullOrEmpty(nameFilter))
			{
				var temp = LocatorLogs.Where(c => c.Allocation != null && c.Allocation.Employee != null && c.Allocation.Employee.Surname != null && c.Allocation.Employee.Surname.Contains(nameFilter));
				return temp.AsQueryable();
			}
			return LocatorLogs.AsQueryable();
		}
	}



}